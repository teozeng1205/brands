"""
Pipeline Analysis and Recommendations for Fare Brand Analysis
============================================================

This script analyzes the existing fare brand analysis pipeline and provides
recommendations for improvements based on the user's requirements.

Author: Data Science Team
Date: 2025-07-03
"""

import pandas as pd
import numpy as np
import warnings
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

# Suppress warnings for cleaner output
warnings.filterwarnings('ignore')

def analyze_existing_pipeline():
    """
    Analyze the existing fare brand analysis pipeline
    """
    print("üîç Analyzing Existing Pipeline")
    print("="*60)
    
    print("\n1. Current Pipeline Overview:")
    print("   ‚úÖ Data Source: Common Output format from 3Victors")
    print("   ‚úÖ Focus: US domestic markets using metadata.airportlocation_extra")
    print("   ‚úÖ Date Filter: Sales date 20250629")
    print("   ‚úÖ Sample Size: 75,000 records")
    print("   ‚úÖ Multi-factor Basic Economy scoring (0-100 points)")
    print("   ‚úÖ Advance purchase analysis (7, 14, 21+ days)")
    print("   ‚úÖ Comprehensive visualizations")
    print("   ‚úÖ CSV deliverables with timestamps")
    
    print("\n2. Current Scoring Methodology:")
    print("   - Price Rank (40% weight):")
    print("     * Rank 1 (cheapest): 40 points")
    print("     * Rank 2: 30 points")
    print("     * Rank 3: 20 points")
    print("   - Refundability (20% weight):")
    print("     * <10% refundable: 20 points")
    print("     * <30% refundable: 10 points")
    print("   - Change Fees (20% weight):")
    print("     * >$100 average: 20 points")
    print("     * >$50 average: 10 points")
    print("   - Brand Name Analysis (20% weight):")
    print("     * Basic keywords: +15 points")
    print("     * Premium keywords: -15 points")
    
    print("\n3. Current Confidence Levels:")
    print("   - High: Score ‚â• 70")
    print("   - Medium: Score ‚â• 50")
    print("   - Low: Score < 50")

def identify_gaps_and_improvements():
    """
    Identify gaps in the current pipeline and suggest improvements
    """
    print("\nüîç Identifying Gaps and Improvements")
    print("="*60)
    
    print("\n1. Data Coverage Gaps:")
    print("   ‚ùå Limited to single sales date (20250629)")
    print("   ‚ùå 75K record limit may miss market coverage")
    print("   ‚ùå No historical trend analysis")
    print("   ‚ùå No seasonal variation analysis")
    
    print("\n2. Analysis Gaps:")
    print("   ‚ùå No fare rules analysis (if available)")
    print("   ‚ùå Limited advance purchase windows (missing 7, 14, 21 day specific analysis)")
    print("   ‚ùå No seat availability correlation")
    print("   ‚ùå No competitive positioning analysis")
    print("   ‚ùå No fare basis code analysis")
    
    print("\n3. Methodology Improvements:")
    print("   ‚ùå Price ranking should consider market-specific context")
    print("   ‚ùå Need to analyze brand availability across different advance purchase windows")
    print("   ‚ùå Should consider fare basis codes for restriction analysis")
    print("   ‚ùå Need to validate Basic Economy detection with known airline policies")

def recommend_enhanced_pipeline():
    """
    Recommend enhancements to the pipeline
    """
    print("\nüîç Recommended Pipeline Enhancements")
    print("="*60)
    
    print("\n1. Data Enhancement Recommendations:")
    print("   ‚úÖ Expand date range to multiple sales dates (trend analysis)")
    print("   ‚úÖ Remove 75K limit to ensure complete market coverage")
    print("   ‚úÖ Add fare basis code analysis for restriction detection")
    print("   ‚úÖ Include cabin class mapping for context")
    print("   ‚úÖ Add booking class analysis")
    
    print("\n2. Advanced Purchase Analysis Enhancement:")
    print("   ‚úÖ Implement specific 7, 14, 21-day window analysis")
    print("   ‚úÖ Track brand availability by advance purchase window")
    print("   ‚úÖ Analyze price elasticity across windows")
    print("   ‚úÖ Identify brands that disappear at shorter windows")
    
    print("\n3. Basic Economy Detection Enhancement:")
    print("   ‚úÖ Market-specific price ranking (not global)")
    print("   ‚úÖ Fare basis code restriction analysis")
    print("   ‚úÖ Brand naming convention analysis by airline")
    print("   ‚úÖ Cross-validation with known airline Basic Economy policies")
    print("   ‚úÖ Seat selection restrictions (if available)")
    
    print("\n4. Deliverable Enhancements:")
    print("   ‚úÖ Add market-level analysis (not just airline-level)")
    print("   ‚úÖ Include brand availability heatmaps")
    print("   ‚úÖ Add confidence scoring explanations")
    print("   ‚úÖ Include methodology documentation")

def create_enhanced_query_templates():
    """
    Create enhanced SQL query templates for improved analysis
    """
    print("\nüîç Enhanced Query Templates")
    print("="*60)
    
    print("\n1. Enhanced Base Data Query:")
    enhanced_base_query = """
    -- Enhanced Base Data Query for Fare Brand Analysis
    SELECT 
        -- Core identifiers
        carrier,
        origin,
        destination,
        origin || '-' || destination as market,
        
        -- Date fields
        sales_date,
        observation_date,
        outbound_departure_date,
        outbound_departure_date - observation_date as days_to_departure,
        
        -- Fare family information
        outbound_fare_family,
        inbound_fare_family,
        
        -- Fare basis and booking class
        outbound_fare_basis,
        inbound_fare_basis,
        outbound_booking_class,
        inbound_booking_class,
        
        -- Pricing
        price_inc,
        price_exc,
        tax,
        yqyr,
        currency,
        
        -- Restrictions and fees
        refundable,
        change_fee,
        
        -- Cabin and service class
        cabin,
        search_class,
        outbound_cabins,
        inbound_cabins,
        
        -- Additional context
        los as length_of_stay,
        customer,
        outbound_travel_stop_over,
        inbound_travel_stop_over
        
    FROM common_output.common_output_format 
    WHERE sales_date BETWEEN 20250625 AND 20250629  -- Multiple days for trend analysis
    AND origin IN (SELECT airportcode FROM metadata.airportlocation_extra WHERE countryname = 'United States')
    AND destination IN (SELECT airportcode FROM metadata.airportlocation_extra WHERE countryname = 'United States')
    AND origin != destination
    AND carrier IS NOT NULL
    AND outbound_fare_family IS NOT NULL
    AND price_inc > 0
    AND outbound_departure_date > observation_date
    -- Removed LIMIT to ensure complete market coverage
    """
    
    print("   ‚úÖ Enhanced base query includes:")
    print("     - Multiple sales dates for trend analysis")
    print("     - Fare basis codes for restriction analysis")
    print("     - Booking classes for service level analysis")
    print("     - Complete market coverage (no LIMIT)")
    
    print("\n2. Market-Specific Price Ranking Query:")
    market_ranking_query = """
    -- Market-Specific Price Ranking for Better Basic Economy Detection
    WITH market_price_ranks AS (
        SELECT 
            carrier,
            market,
            outbound_fare_family,
            days_to_departure,
            price_inc,
            -- Rank within each market-carrier-advance_purchase combination
            ROW_NUMBER() OVER (
                PARTITION BY market, carrier, 
                CASE 
                    WHEN days_to_departure <= 7 THEN '0-7 days'
                    WHEN days_to_departure <= 14 THEN '8-14 days'
                    WHEN days_to_departure <= 21 THEN '15-21 days'
                    ELSE '22+ days'
                END
                ORDER BY price_inc ASC
            ) as price_rank_in_market
        FROM enhanced_base_data
    )
    SELECT * FROM market_price_ranks
    WHERE price_rank_in_market <= 3  -- Focus on top 3 cheapest in each market
    """
    
    print("   ‚úÖ Market-specific ranking provides:")
    print("     - Context-aware price ranking")
    print("     - Advance purchase window specific analysis")
    print("     - Better Basic Economy detection accuracy")
    
    print("\n3. Brand Availability Analysis Query:")
    brand_availability_query = """
    -- Brand Availability Across Advance Purchase Windows
    SELECT 
        carrier,
        market,
        outbound_fare_family,
        
        -- Count availability in each advance purchase window
        COUNT(CASE WHEN days_to_departure <= 7 THEN 1 END) as available_0_7_days,
        COUNT(CASE WHEN days_to_departure BETWEEN 8 AND 14 THEN 1 END) as available_8_14_days,
        COUNT(CASE WHEN days_to_departure BETWEEN 15 AND 21 THEN 1 END) as available_15_21_days,
        COUNT(CASE WHEN days_to_departure > 21 THEN 1 END) as available_22_plus_days,
        
        -- Overall statistics
        COUNT(*) as total_observations,
        MIN(price_inc) as min_price,
        AVG(price_inc) as avg_price,
        MAX(price_inc) as max_price,
        
        -- Restriction indicators
        AVG(CASE WHEN refundable = 'Y' THEN 1 ELSE 0 END) as pct_refundable,
        AVG(change_fee) as avg_change_fee
        
    FROM enhanced_base_data
    GROUP BY carrier, market, outbound_fare_family
    HAVING COUNT(*) >= 5  -- Ensure sufficient observations
    """
    
    print("   ‚úÖ Brand availability analysis provides:")
    print("     - Advance purchase window availability patterns")
    print("     - Restriction pattern analysis")
    print("     - Statistical significance filtering")

def create_enhanced_basic_economy_detection():
    """
    Create enhanced Basic Economy detection algorithm
    """
    print("\nüîç Enhanced Basic Economy Detection Algorithm")
    print("="*60)
    
    print("\n1. Enhanced Scoring Framework (0-100 points):")
    
    print("\n   A. Market-Specific Price Ranking (35% weight):")
    print("      - Rank 1 in market: 35 points")
    print("      - Rank 2 in market: 25 points")
    print("      - Rank 3 in market: 15 points")
    print("      - Rank 4+ in market: 5 points")
    
    print("\n   B. Advance Purchase Availability (20% weight):")
    print("      - Available in 0-7 days: +20 points")
    print("      - Available in 8-14 days: +15 points")
    print("      - Available in 15-21 days: +10 points")
    print("      - Only available 22+ days: +5 points")
    
    print("\n   C. Restriction Analysis (25% weight):")
    print("      - <5% refundable: 25 points")
    print("      - 5-15% refundable: 15 points")
    print("      - 15-30% refundable: 10 points")
    print("      - >30% refundable: 5 points")
    
    print("\n   D. Change Fee Analysis (10% weight):")
    print("      - >$150 average: 10 points")
    print("      - $100-150 average: 8 points")
    print("      - $50-100 average: 5 points")
    print("      - <$50 average: 2 points")
    
    print("\n   E. Brand Name Analysis (10% weight):")
    print("      - Basic keywords: +10 points")
    print("      - Premium keywords: -10 points")
    print("      - Neutral keywords: 0 points")
    
    print("\n2. Enhanced Confidence Levels:")
    print("   - Very High: Score ‚â• 80 (Strong Basic Economy candidate)")
    print("   - High: Score 70-79 (Likely Basic Economy)")
    print("   - Medium: Score 50-69 (Possible Basic Economy)")
    print("   - Low: Score 30-49 (Unlikely Basic Economy)")
    print("   - Very Low: Score < 30 (Not Basic Economy)")

def create_deliverable_template():
    """
    Create enhanced deliverable template
    """
    print("\nüîç Enhanced Deliverable Template")
    print("="*60)
    
    print("\n1. Main Deliverable Table Structure:")
    print("   Required Columns:")
    print("   - Airline (carrier)")
    print("   - Source (data source identifier)")
    print("   - Market (origin-destination)")
    print("   - All_Detected_Brands (pipe-separated list)")
    print("   - Identified_Basic_Economy_Brands (pipe-separated list)")
    print("   - Confidence_Score (0-100)")
    print("   - Confidence_Level (Very High/High/Medium/Low/Very Low)")
    print("   - Price_Rank_in_Market (1-N)")
    print("   - Avg_Price_Inclusive")
    print("   - Pct_Refundable")
    print("   - Avg_Change_Fee")
    print("   - Available_0_7_Days (Y/N)")
    print("   - Available_8_14_Days (Y/N)")
    print("   - Available_15_21_Days (Y/N)")
    print("   - Available_22_Plus_Days (Y/N)")
    print("   - Analysis_Date")
    print("   - Methodology_Version")
    
    print("\n2. Additional Deliverables:")
    print("   ‚úÖ Brand availability heatmap by airline and advance purchase window")
    print("   ‚úÖ Market coverage analysis by airline")
    print("   ‚úÖ Confidence score distribution analysis")
    print("   ‚úÖ Methodology documentation with examples")
    print("   ‚úÖ Quality assurance report with validation checks")

def create_implementation_roadmap():
    """
    Create implementation roadmap for enhanced pipeline
    """
    print("\nüîç Implementation Roadmap")
    print("="*60)
    
    print("\nüìã Phase 1: Data Foundation (Week 1)")
    print("   ‚úÖ Test database connectivity and credentials")
    print("   ‚úÖ Validate data availability and coverage")
    print("   ‚úÖ Implement enhanced base data query")
    print("   ‚úÖ Create data quality validation checks")
    
    print("\nüìã Phase 2: Enhanced Analysis (Week 2)")
    print("   ‚úÖ Implement market-specific price ranking")
    print("   ‚úÖ Add advance purchase window analysis")
    print("   ‚úÖ Integrate fare basis code analysis")
    print("   ‚úÖ Create enhanced Basic Economy scoring")
    
    print("\nüìã Phase 3: Validation and Testing (Week 3)")
    print("   ‚úÖ Validate results against known airline policies")
    print("   ‚úÖ Cross-check with existing pipeline results")
    print("   ‚úÖ Perform sensitivity analysis on scoring weights")
    print("   ‚úÖ Create quality assurance framework")
    
    print("\nüìã Phase 4: Production and Deliverables (Week 4)")
    print("   ‚úÖ Generate final deliverable tables")
    print("   ‚úÖ Create comprehensive visualizations")
    print("   ‚úÖ Document methodology and assumptions")
    print("   ‚úÖ Prepare presentation materials")

def main():
    """
    Main function to run the complete pipeline analysis
    """
    print("üöÄ Pipeline Analysis and Recommendations")
    print("="*80)
    
    # Run all analysis functions
    analyze_existing_pipeline()
    identify_gaps_and_improvements()
    recommend_enhanced_pipeline()
    create_enhanced_query_templates()
    create_enhanced_basic_economy_detection()
    create_deliverable_template()
    create_implementation_roadmap()
    
    print("\nüéØ Key Recommendations Summary:")
    print("="*60)
    print("1. ‚úÖ Expand data coverage (remove limits, add multiple dates)")
    print("2. ‚úÖ Implement market-specific price ranking")
    print("3. ‚úÖ Add advance purchase window specific analysis")
    print("4. ‚úÖ Enhance Basic Economy detection with fare basis codes")
    print("5. ‚úÖ Create comprehensive deliverables with confidence scoring")
    print("6. ‚úÖ Validate results against known airline policies")
    print("7. ‚úÖ Implement quality assurance framework")
    
    print("\nüìä Expected Improvements:")
    print("- Better accuracy in Basic Economy detection")
    print("- More comprehensive market coverage")
    print("- Advanced purchase pattern insights")
    print("- Robust confidence scoring")
    print("- Production-ready deliverables")
    
    print("\nüéâ Analysis complete! Ready for implementation.")

if __name__ == "__main__":
    main() 